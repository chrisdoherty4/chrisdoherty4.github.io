<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Chris Doherty</title>
    <link>https://chrisdoherty.io/tags/go/</link>
    <description>Recent content in go on Chris Doherty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Sep 2020 09:51:23 -0600</lastBuildDate><atom:link href="https://chrisdoherty.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Preventing unintended overwrites with shared slices</title>
      <link>https://chrisdoherty.io/2020/09/preventing-unintended-overwrites-with-shared-slices/</link>
      <pubDate>Sat, 19 Sep 2020 09:51:23 -0600</pubDate>
      
      <guid>https://chrisdoherty.io/2020/09/preventing-unintended-overwrites-with-shared-slices/</guid>
      <description>Slices #  Go slices are small constructs backed by a traditional array. The slice construct is light weight because it contains only a pointer to it&amp;rsquo;s first element, a length and a capacity. The slice pointer can point to any element in the backing array.
The length denotes the number of elements currently in the slice and the capactiy denotes the maximum number of elements allowed in the slice. Generally, the capacity of a slice is the size of the underlying array.</description>
    </item>
    
    <item>
      <title>runtime.NumCPU</title>
      <link>https://chrisdoherty.io/2020/05/runtime.numcpu/</link>
      <pubDate>Fri, 22 May 2020 20:52:59 -0600</pubDate>
      
      <guid>https://chrisdoherty.io/2020/05/runtime.numcpu/</guid>
      <description>A number of books and articles I&amp;rsquo;ve read recently claim that runtime.NumCPU() returns the physical processor count. This isn&amp;rsquo;t accurate: runtime.NumCPU() has always returned the logical processor count. Perhaps the authors use the terms physical and logical interchangably given most/all mainstream processors have simaltaneous multithreading technology?</description>
    </item>
    
  </channel>
</rss>
