<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>releasing on Chris Doherty</title>
    <link>https://chrisdoherty.io/tags/releasing/</link>
    <description>Recent content in releasing on Chris Doherty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Sep 2020 10:01:08 -0600</lastBuildDate><atom:link href="https://chrisdoherty.io/tags/releasing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Releasing Go Modules</title>
      <link>https://chrisdoherty.io/2020/09/releasing-go-modules/</link>
      <pubDate>Sun, 27 Sep 2020 10:01:08 -0600</pubDate>
      
      <guid>https://chrisdoherty.io/2020/09/releasing-go-modules/</guid>
      <description>There are 2 main methods for releasing Go modules: Copying all sources to a version directory in the root of the repository or creating a version branch. I don&amp;rsquo;t like copying my full source to a subdirectory so I&amp;rsquo;m focusing this article on creating a version branch which is a common approach for releasing software.
Prelude: Semantic Import Versioning #  Go uses semantic versioning (semver) for dependency management. Additionally, Go has a simple rule when importing packages.</description>
    </item>
    
  </channel>
</rss>
