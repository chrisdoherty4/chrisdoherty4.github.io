<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris Doherty</title>
    <link>https://chrisdoherty.io/</link>
    <description>Recent content on Chris Doherty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://chrisdoherty.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Determining Endianness in Go</title>
      <link>https://chrisdoherty.io/2020/09/determining-endianness-in-go/</link>
      <pubDate>Sat, 26 Sep 2020 17:05:08 -0600</pubDate>
      
      <guid>https://chrisdoherty.io/2020/09/determining-endianness-in-go/</guid>
      <description>In most languages you can do some variation of the same algorithm to determine endianness. The algorithm generally involves writing 0x0100 to a 16-bit integer and checking if the 0x01 or 0x00 byte was written at the first address.
func Endian() string { var i int = 0x0100 ptr := unsafe.Pointer(&amp;amp;i) if 0x01 == *(*byte)(ptr) { return &amp;#34;Big Endian&amp;#34; } else if 0x00 == *(*byte)(ptr) { return &amp;#34;Little Endian&amp;#34; } else { return &amp;#34;Unknown&amp;#34; } } </description>
    </item>
    
    <item>
      <title>Integer Conversion in Go</title>
      <link>https://chrisdoherty.io/2020/09/integer-conversion-in-go/</link>
      <pubDate>Sat, 26 Sep 2020 14:56:58 -0600</pubDate>
      
      <guid>https://chrisdoherty.io/2020/09/integer-conversion-in-go/</guid>
      <description>Go&amp;rsquo;s integer type conversion behaves differently dependent on whether you&amp;rsquo;re declaring a variable and assigning a value to it or applying a type conversion to existing data.
Declarig a variable and assigning a value outside the representable bounds of the variable type results in an error.
// Fails because int8s bounds are -128 to 127 var i int8 = 128 var j int16 = 128 var k int8 = j // Fails because j was declared as in8.</description>
    </item>
    
    <item>
      <title>Preventing unintended overwrites with shared slices</title>
      <link>https://chrisdoherty.io/2020/09/preventing-unintended-overwrites-with-shared-slices/</link>
      <pubDate>Sat, 19 Sep 2020 09:51:23 -0600</pubDate>
      
      <guid>https://chrisdoherty.io/2020/09/preventing-unintended-overwrites-with-shared-slices/</guid>
      <description>Slices #  Go slices are small constructs backed by a traditional array. The slice construct is light weight because it contains only a pointer to it&amp;rsquo;s first element, a length and a capacity. The slice pointer can point to any element in the backing array.
The length denotes the number of elements currently in the slice and the capactiy denotes the maximum number of elements allowed in the slice. Generally, the capacity of a slice is the size of the underlying array.</description>
    </item>
    
    <item>
      <title>Unsigned</title>
      <link>https://chrisdoherty.io/2020/06/unsigned/</link>
      <pubDate>Wed, 24 Jun 2020 17:39:28 -0600</pubDate>
      
      <guid>https://chrisdoherty.io/2020/06/unsigned/</guid>
      <description>Using an unsigned instead of an int to gain one more bit to represent positive integers is almost never a good idea
 - Bjarne Stroustrup
Default representation #  It&amp;rsquo;s natural to think of integers in terms of signed types because they can represent negative values. In C/C++, integer literals, without any modifiers, are signed types.
If done incorrectly, converting between signed and unsigned integers can be dangerous. Even when done correctly, if the program is working with a value that can&amp;rsquo;t be represented within the bounds of the target signedness the program experiences an error and that error must be dealt with.</description>
    </item>
    
    <item>
      <title>runtime.NumCPU</title>
      <link>https://chrisdoherty.io/2020/05/runtime.numcpu/</link>
      <pubDate>Fri, 22 May 2020 20:52:59 -0600</pubDate>
      
      <guid>https://chrisdoherty.io/2020/05/runtime.numcpu/</guid>
      <description>A number of books and articles I&amp;rsquo;ve read recently claim that runtime.NumCPU() returns the physical processor count. This isn&amp;rsquo;t accurate: runtime.NumCPU() has always returned the logical processor count. Perhaps the authors use the terms physical and logical interchangably given most/all mainstream processors have simaltaneous multithreading technology?
package main import ( &amp;#34;runtime&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { fmt.Println(runtime.NumCPU()) } </description>
    </item>
    
  </channel>
</rss>
