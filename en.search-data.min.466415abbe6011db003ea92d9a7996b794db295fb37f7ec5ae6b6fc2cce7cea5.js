'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/2020/09/integer-conversion-in-go/','title':"Integer Conversion in Go",'section':"Posts",'content':"Go\u0026rsquo;s integer type conversion behaves differently dependent on whether you\u0026rsquo;re declaring a variable and assigning a value to it or applying a type conversion to existing data.\nDeclarig a variable and assigning a value outside the representable bounds of the variable type results in an error.\n// Fails because int8s bounds are -128 to 127 var i int8 = 128 var j int16 = 128 var k int8 = j // Fails because j was declared as in8. Converting a data to a type with less bits resuts in data with the most significant bits being dropped.\nvar i int16 = 0x0100 j := int8(i) // 0x00 as the most significant bits in i are dropped. "});index.add({'id':1,'href':'/2020/09/preventing-unintended-overwrites-with-shared-slices/','title':"Preventing unintended overwrites with shared slices",'section':"Posts",'content':"Slices #  Go slices are small constructs backed by a traditional array. The slice construct is light weight because it contains only a pointer to it\u0026rsquo;s first element, a length and a capacity. The slice pointer can point to any element in the backing array.\nThe length denotes the number of elements currently in the slice and the capactiy denotes the maximum number of elements allowed in the slice. Generally, the capacity of a slice is the size of the underlying array. When we add a new element to a slice that\u0026rsquo;s reached it\u0026rsquo;s capacity a new backing array is created that is typically twice the size of the current capactiy.\nPassing slices around #  When a slice is passed as a function argument or used as a return value it maintains a reference to the same backing array because the copy of a slice contains copies of the pointer, length and capactiy. Subsequently, changing an element in a slice causes all slices pointing to the same backing array to be updated.\nfunc update(s []string) { s[0] = \u0026#34;Banana\u0026#34; } func main() { originSlice := []string{\u0026#34;Tomato\u0026#34;, \u0026#34;Squash\u0026#34;, \u0026#34;Lettuce\u0026#34;, \u0026#34;Spinach\u0026#34;} update(newSlice) fmt.Println(originSlice) // \u0026#34;Tomato\u0026#34; has changed to \u0026#34;Banana\u0026#34; } Similarly, creating a new slice containing a subset of elements with the newSlice := originSlice[startIndex:endIndexExclusive] syntax and manipulating the new slice results in data in the originSlice being updated. This includes appending data to the newSlice, that has the same capacity as the originSlice.\nfunc main() { originSlice := []string{\u0026#34;Tomato\u0026#34;, \u0026#34;Squash\u0026#34;, \u0026#34;Lettuce\u0026#34;, \u0026#34;Spinach\u0026#34;} newSlice := originSlice[0:2] // {\u0026#34;Tomato\u0026#34;, \u0026#34;Squash\u0026#34;}  newSlice = append(newSlice, \u0026#34;Banana\u0026#34;) // {\u0026#34;Tomato\u0026#34;, \u0026#34;Squash\u0026#34;, \u0026#34;Banana\u0026#34;}  // Origin slice inadvertently updated  fmt.Println(originSlice) // {\u0026#34;Tomato\u0026#34;, \u0026#34;Squash\u0026#34;, \u0026#34;Banana\u0026#34;, \u0026#34;Spinach\u0026#34;} } Protecting against append overwrites #  We can protect against append(...) specifically by explicitly setting the newSlice capacity to the same as the length using newSlice := originSlice[startIndex:endIndexExclusive:expectedNewSliceLen] syntax. When we try appending to the newSlice that has reached it\u0026rsquo;s capacity Go creates a new backing array with increased capacity, copies the elements in newSlice to the new backing array and returns a new slice pointing to the new backing array.\nfunc main() { originSlice := []string{\u0026#34;Tomato\u0026#34;, \u0026#34;Squash\u0026#34;, \u0026#34;Lettuce\u0026#34;, \u0026#34;Spinach\u0026#34;} // New slice with capacity  newSlice := originSlice[0:2:2] // Len \u0026gt; Capacity resulting in new backing array being created.  newSlice = append(newSlice, \u0026#34;Banana\u0026#34;) // Origin slice inadvertently updated  fmt.Println(newSlice) // {\u0026#34;Tomato\u0026#34;, \u0026#34;Squash\u0026#34;, \u0026#34;Banana\u0026#34;}  fmt.Println(originSlice) // {\u0026#34;Tomato\u0026#34;, \u0026#34;Squash\u0026#34;, \u0026#34;Lettuce\u0026#34;, \u0026#34;Spinach\u0026#34;} } "});index.add({'id':2,'href':'/2020/06/unsigned/','title':"Unsigned",'section':"Posts",'content':" Using an unsigned instead of an int to gain one more bit to represent positive integers is almost never a good idea\n - Bjarne Stroustrup\nDefault representation #  It\u0026rsquo;s natural to think of integers in terms of signed types because they can represent negative values. In C/C++, integer literals, without any modifiers, are signed types.\nIf done incorrectly, converting between signed and unsigned integers can be dangerous. Even when done correctly, if the program is working with a value that can\u0026rsquo;t be represented within the bounds of the target signedness the program experiences an error and that error must be dealt with.\nIt\u0026rsquo;s tempting, particularly if you know you aren\u0026rsquo;t going to need to represent values \u0026lt; 0, to use unsigned. Doing so can have dire consequences.\nRule of thumb #   If all possible numbers can be represented in the signed type, use signed\n Consider unsigned for algorithms that perform bit manipulation or with embedded systems.\n"});index.add({'id':3,'href':'/2020/05/runtime.numcpu/','title':"runtime.NumCPU",'section':"Posts",'content':"A number of books and articles I\u0026rsquo;ve read recently claim that runtime.NumCPU() returns the physical processor count. This isn\u0026rsquo;t accurate: runtime.NumCPU() has always returned the logical processor count. Perhaps the authors use the terms physical and logical interchangably given most/all mainstream processors have simaltaneous multithreading technology?\npackage main import ( \u0026#34;runtime\u0026#34; \u0026#34;fmt\u0026#34; ) func main() { fmt.Println(runtime.NumCPU()) } "});})();