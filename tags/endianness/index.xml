<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>endianness on Chris Doherty</title>
    <link>https://chrisdoherty.io/tags/endianness/</link>
    <description>Recent content in endianness on Chris Doherty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Sep 2020 17:05:08 -0600</lastBuildDate><atom:link href="https://chrisdoherty.io/tags/endianness/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Determining Endianness in Go</title>
      <link>https://chrisdoherty.io/2020/09/determining-endianness-in-go/</link>
      <pubDate>Sat, 26 Sep 2020 17:05:08 -0600</pubDate>
      
      <guid>https://chrisdoherty.io/2020/09/determining-endianness-in-go/</guid>
      <description>In most languages you can do some variation of the same algorithm to determine endianness. The algorithm generally involves writing 0x0100 to a 16-bit integer and checking if the 0x01 or 0x00 byte was written at the first address.
func Endian() string { var i int = 0x0100 ptr := unsafe.Pointer(&amp;amp;i) if 0x01 == *(*byte)(ptr) { return &amp;#34;Big Endian&amp;#34; } else if 0x00 == *(*byte)(ptr) { return &amp;#34;Little Endian&amp;#34; } else { return &amp;#34;Unknown&amp;#34; } } </description>
    </item>
    
  </channel>
</rss>
